[tool.poetry]
name = "infinitum-ai-agent"
version = "0.2.0"
description = "AI-powered product search and recommendation system with clean architecture"
authors = ["Infinitum Team <team@infinitum.ai>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/infinitum/ai-agent"
repository = "https://github.com/infinitum/ai-agent"
documentation = "https://docs.infinitum.ai"
keywords = ["ai", "search", "recommendation", "fastapi", "clean-architecture"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]
packages = [
    { include = "infinitum", from = "src" },
    { include = "apps" },
]

[tool.poetry.dependencies]
python = "^3.11"
# Web Framework
fastapi = "^0.104.1"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
# HTTP Client
httpx = "^0.25.2"
# Configuration
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
python-dotenv = "^1.0.0"
# Database & Storage
firebase-admin = "^6.4.0"
google-cloud-firestore = "^2.13.1"
google-cloud-storage = "^2.10.0"
# AI & ML
google-cloud-aiplatform = "^1.38.1"
vertexai = "^1.38.1"
openai = "^1.3.7"
litellm = "^1.17.9"
sentence-transformers = "^2.2.2"
numpy = "^1.24.0"
scikit-learn = "^1.3.2"
# Web Scraping
crawl4ai = "^0.2.77"
beautifulsoup4 = "^4.12.2"
# Search APIs
google-search-results = "^2.4.2"
# Async & Concurrency
asyncio = "^3.4.3"
aiohttp = "^3.9.1"
# Validation & Serialization
marshmallow = "^3.20.1"
marshmallow-dataclass = "^8.6.0"
# Dependency Injection
dependency-injector = "^4.41.0"
# Monitoring & Logging
structlog = "^23.2.0"
rich = "^13.7.0"
sentry-sdk = {extras = ["fastapi"], version = "^1.38.0"}
prometheus-client = "^0.19.0"
opentelemetry-api = "^1.21.0"
opentelemetry-sdk = "^1.21.0"
opentelemetry-instrumentation-fastapi = "^0.42b0"
# Security
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
# WebSocket & SSE
websockets = "^12.0"
sse-starlette = "^1.6.5"
# Utilities
python-multipart = "^0.0.6"
email-validator = "^2.1.0"
python-slugify = "^8.0.1"
# Development Tools (optional in production)
typer = {version = "^0.9.0", optional = true}

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-xdist = "^3.5.0"
httpx = "^0.25.2"  # For testing FastAPI
# Code Quality
black = "^23.11.0"
isort = "^5.12.0"
flake8 = "^6.1.0"
mypy = "^1.7.1"
bandit = "^1.7.5"
# Documentation
mkdocs = "^1.5.3"
mkdocs-material = "^9.4.8"
mkdocstrings = {extras = ["python"], version = "^0.24.0"}
# Development Tools
pre-commit = "^3.6.0"
commitizen = "^3.13.0"
# Performance Testing
locust = "^2.17.0"

[tool.poetry.group.test.dependencies]
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
factory-boy = "^3.3.0"
faker = "^20.1.0"

[tool.poetry.extras]
cli = ["typer"]
all = ["typer"]

[tool.poetry.scripts]
infinitum = "apps.cli.commands:app"
infinitum-api = "apps.api.main:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Tool Configurations
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["infinitum", "apps"]
known_third_party = ["fastapi", "pydantic", "sqlalchemy"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "google.*",
    "firebase_admin.*",
    "vertexai.*",
    "crawl4ai.*",
    "serpapi.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow tests",
    "external: Tests that require external services",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src", "apps"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.bandit]
exclude_dirs = ["tests", "test_*.py"]
skips = ["B101", "B601"]

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.2.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version",
    "src/infinitum/__init__.py:__version__",
]