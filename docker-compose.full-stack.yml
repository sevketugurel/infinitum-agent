# Full-Stack Docker Compose Configuration
# For local development and testing of the complete system

version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: infra/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - ENVIRONMENT=development
      - GCP_PROJECT_ID=infinitum-agent
      - FIREBASE_PROJECT_ID=infinitum-agent
      - PORT=8080
      - GOOGLE_APPLICATION_CREDENTIALS=/app/credentials/service-account.json
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - SERPAPI_API_KEY=${SERPAPI_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ENABLE_DEBUG_LOGGING=true
      - LOG_LEVEL=INFO
    volumes:
      - ./backend/credentials:/app/credentials:ro
      - ./backend/src:/app/src
    networks:
      - infinitum-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Frontend Development Server
  frontend:
    build:
      context: ./InfinitiumX
      dockerfile: Dockerfile.dev
      args:
        - VITE_API_BASE_URL=http://localhost:8080
        - VITE_WS_BASE_URL=ws://localhost:8080
        - VITE_FIREBASE_PROJECT_ID=infinitum-agent
        - VITE_FIREBASE_AUTH_DOMAIN=infinitum-agent.firebaseapp.com
    ports:
      - "5173:5173"
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://localhost:8080
      - VITE_WS_BASE_URL=ws://localhost:8080
      - VITE_FIREBASE_PROJECT_ID=infinitum-agent
      - VITE_FIREBASE_AUTH_DOMAIN=infinitum-agent.firebaseapp.com
      - VITE_FIREBASE_API_KEY=${VITE_FIREBASE_API_KEY}
    volumes:
      - ./InfinitiumX/src:/app/src
      - ./InfinitiumX/public:/app/public
      - /app/node_modules
    networks:
      - infinitum-network
    depends_on:
      - backend
    restart: unless-stopped

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - infinitum-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - infinitum-network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - infinitum-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana for monitoring dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - infinitum-network
    depends_on:
      - prometheus
    restart: unless-stopped

networks:
  infinitum-network:
    driver: bridge

volumes:
  redis_data:
  prometheus_data:
  grafana_data: